# MATH50003 Numerical Analysis: Problem Sheet 6

This problem sheet explores condition numbers, indefinite integration,
and Euler's metohd.

Questions marked with a ‚ãÜ are meant to be completed without using a computer.

```julia
using LinearAlgebra, Plots
```


## 1. Condition numbers


**Problem 1.1‚ãÜ** Prove that, if $|œµ_i| ‚â§ œµ$ and $n œµ < 1$, then
$$
\prod_{k=1}^n (1+œµ_i) = 1+Œ∏_n
$$
for some constant $Œ∏_n$ satisfying $|Œ∏_n| ‚â§ {n œµ \over 1-nœµ}$.

**Problem 1.2‚ãÜ** Let $A,B ‚àà ‚Ñù^{m √ó n}$. Prove that if the columns satisfy $\|ùêö_j\|_2 ‚â§¬†\| ùêõ_j\|_2$ then
$\|A\|_F ‚â§¬†\|B\|_F$ and $\|A \|_2 ‚â§¬†\sqrt{\hbox{rank}(B)} \|B\|_2$.

**Problem 1.3‚ãÜ** Compute the 1-norm, 2-norm, and ‚àû-norm condition numbers for the following matrices:
$$
\begin{bmatrix}
1 & 2 \\ 3 & 4
\end{bmatrix}, \begin{bmatrix}
1/3 & 1/5 \\ 0 & 1/7
\end{bmatrix}, \begin{bmatrix} 1 \\ & 1/2 \\ && ‚ãØ \\ &&& 1/2^n \end{bmatrix}
$$
(Hint: recall that the singular values of a matrix $A$ are the square roots of the eigenvalues of the Gram matrix
$A^‚ä§A$.)


**Problem 1.4**
What bound on the relative error on $A ùêØ$ for $\|ùêØ\|_2 = 1$ give for the following matrices:
$$
\begin{bmatrix}
1/3 & 1/5 \\ 0 & 1/10^3
\end{bmatrix},
 \begin{bmatrix} 1 \\ & 1/2 \\ && ‚ãØ \\ &&& 1/2^{10} \end{bmatrix}
$$
Compute the relative error (using `big` for a high-precision version to compare against)
where $ùêØ$ is a column of $V$ in the SVD $A = U Œ£ V^‚ä§$, computed using the `svd` command with
`Float64` inputs.





## 2. Indefinite integration

**Problem 2.1** Implement backward differences to approximate
 indefinite-integration. How does the error compare to forward
 and mid-point versions  for $f(x) = \cos x$ on the interval $[0,1]$?


**Problem 2.2** Implement indefinite-integration 
where we take the average of the two grid points:
$$
{u'(x_{k+1}) + u'(x_k) \over 2} ‚âà {u_{k+1} - u_k \over h}
$$
What is the observed rate-of-convergence using the ‚àû-norm for $f(x) = \cos x$
on the interval $[0,1]$?
Does the method converge if the error is measured in the $1$-norm?

**SOLUTION**

```julia
n = 1000
x = range(0, 1; length=n+1)
h = 1/n
A = Bidiagonal([1; fill(1/h, n)], fill(-1/h, n), :L)
c = 0 # u(0) = 0
f = x -> cos(x)

ùêü = f.(x) # evaluate f at all but last points
u‚Çô = A \ [c; (ùêü[1:end-1] + ùêü[2:end])/2]


norm(u‚Çô - sin.(x),1)
```

**END**

## 3. Euler methods

**Problem 3.1‚ãÜ** For an evenly spaced grid $t_1, ‚Ä¶, t_n$, use the approximation
$$
{u'(t_{k+1}) + u'(t_k) \over 2} ‚âà {u_{k+1} - u_k \over h}
$$
to recast
$$
\begin{align*}
u(0) &= c \\
u'(t) &= a(t) u(t) + f(t)
\end{align*}
$$
as a lower bidiagonal linear system. Use forward-substitution to extend this to vector linear problems:
$$
\begin{align*}
ùêÆ(0) &= ùêú \\
ùêÆ'(t) &= A(t) ùêÆ(t) + ùêü(t)
\end{align*}
$$


**Problem 3.2** Implement the method designed in Problem 3.1 for the negative time Airy equation 
$$
u(0) = 1, u'(0) = 0, u''(t) = -t u(t)
$$
on $[0,50]$.
How many time-steps are needed to get convergence to 1% accuracy (the "eyeball norm")?

**Problem 3.3** Use `Dual` and Newton iteration to find a frequency `œâ` such that
the heat on a graph with 50 nodes, with periodic forcing $cos(\omega t)$ at node 25, is equal to zero at time $T = 1$ at node $25$, using Forward Euler
with 200 time-steps to approximate the solution to the differential equation.
(Hint: use `U·∂† = zeros(typeof(œâ), m, n)` to ensure duals are allowed and use an initial guess of
`œâ = 1`.)

**SOLUTION**
```julia
using DualNumbers

function heat(œâ)
    n = 200 # number of time-steps
    t = range(0, 1; length=n)
    h = step(t)

    m = 50 # number of nodes
    Œî = SymTridiagonal([-1; fill(-2.0, m-2); -1], ones(m-1))

    U·∂† = zeros(typeof(œâ), m, n) # each column is a time-slice for forward Euler

    U·∂†[:,1] = zeros(m) # initial condition

    for k = 1:n-1
        U·∂†[:,k+1] = (I + h*Œî)*U·∂†[:,k]
        U·∂†[m√∑2,k+1] += h*cos(œâ * t[k]) # add forcing at ùêû_1
    end
    U·∂†[m√∑2,end]
end

œâ = 1.0
hœâ = heat(Dual(œâ,1))
œâ = œâ - dualpart(hœâ) \ realpart(hœâ)
```

**Problem 3.4** Consider the equation
$$
u(1) = 1, u'(t) = -10u(t)
$$
What behaviour do you observe on $[0,10]$ of forward, backward, and that of Problem 3.1
with a step-size of 0.5? What happens if you decrease the step-size to $0.01$? (Hint: you may wish to do a plot and scale the $y$-axis logarithmically,)

**SOLUTION**

```julia
h = 0.5
t = range(0, 10; step=h)
n = length(t)
u·∂† = zeros(n)
u·µá = zeros(n)
u·µó = zeros(n)
u·∂†[1] = u·µá[1] = u·µó[1] = 1
a = -10
for k = 1:n-1
    u·∂†[k+1] = (1+h*a) * u·∂†[k]
    u·µá[k+1] = (1-h*a) \ u·µá[k]
    u·µó[k+1] = (1-h*a/2) \ (1 + h*a/2) * u·µó[k]
end

plot(t, abs.(u·∂†); yscale=:log10)
plot!(t, abs.(u·µá); yscale=:log10)
plot!(t, abs.(u·µó); yscale=:log10)
```


```julia
h = 0.01
t = range(0, 10; step=h)
n = length(t)
u·∂† = zeros(n)
u·µá = zeros(n)
u·µó = zeros(n)
u·∂†[1] = u·µá[1] = u·µó[1] = 1
for k = 1:n-1
    u·∂†[k+1] = (1+h*a) * u·∂†[k]
    u·µá[k+1] = (1-h*a) \ u·µá[k]
    u·µó[k+1] = (1-h*a/2) \ (1 + h*a/2) * u·µó[k]
end

nanabs(x) = iszero(x) ? NaN : abs(x)

plot(t, nanabs.(u·∂†); yscale=:log10)
plot!(t, nanabs.(u·µá); yscale=:log10)
plot!(t, nanabs.(u·µó); yscale=:log10)
```
